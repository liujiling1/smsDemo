package com.yjkj.sms.controller;

import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.yjkj.sms.common.SmsConstant.Todo;
import com.yjkj.sms.config.shiro.dto.SysUser;
import com.yjkj.sms.service.SysUserService;
import com.yjkj.util.result.ResponseMsg;

@Controller
@RequestMapping("/user")
public class SysUserController{

    @Autowired
    private SysUserService sysUserService;

    @RequestMapping("/userList")
    public String userList(Map<String,Object> model){
        return "user/userList";
    }
    
    @RequestMapping("/qryUserList")
    @ResponseBody
    public Map<String,Object> qryUserList(Map<String,Object> model){
        return ResponseMsg.getInstance(sysUserService.getUsers());
    }
    
    @RequestMapping(value = "/modifyUser/{id}/{todo}", method = RequestMethod.GET)
	public String modifyUser(@PathVariable Integer id , @PathVariable String todo , Map<String, Object> model) {
		model.put("todo", todo);
		
		if(Todo.ADD.code().equals(todo)) {
			model.put("userInfo",new SysUser());
		}else if(Todo.UPD.code().equals(todo) || "psd".equals(todo)) {
			model.put("userInfo",sysUserService.getUserById(id));
		}
		return "user/modifyUser";
	}
    
    @RequestMapping(value = "/saveUserInfo", method = RequestMethod.POST)
    @ResponseBody
    public Map<String,Object> saveUserAuths(@RequestParam Map<String, Object> param){
        String todo = param.get("todo")+"";
    	int result = 0;
    	if(Todo.ADD.code().equals(todo)) {
    		result = sysUserService.addUser(param);
    		
    	}else if(Todo.UPD.code().equals(todo)){
    		result = sysUserService.updUser(param);
    		
    	}else if("psd".equals(todo)) {
    		sysUserService.resetPwd(param);
    	}
    	
    	return ResponseMsg.getInstance(result);
    }
    
/*    
 * 

    @RequestMapping("/{id}")
    public String detail(@PathVariable int id, HttpServletRequest request, Map<String,Object> model){
        model.put("p_flag", request.getParameter("p_flag"));
        model.put("p_href", "/users/index");
        model.put("user",sysUserService.getUserById(id));
        return "user/account/detail";
    }

    @RequestMapping(method = RequestMethod.PUT)
    public String modify(SysUser sysUser){
        sysUserService.modify(sysUser);
        return "redirect:/users/"+sysUser.getId()+"?p_flag=2";
    }

    @RequestMapping(value = "/{id}/auths", method = RequestMethod.GET)
    @ResponseBody
    public Map<String,Object> getUserAuths(@PathVariable int id){
        return successResponse(sysUserService.getUserAuths(id));
    }


    @RequestMapping(value = "/{id}/enable", method = RequestMethod.POST)
    @ResponseBody
    public Map<String,Object> enable(@PathVariable int id){
        Map<String, Object> aysUser = sysUserService.getUserById(id);
        sysUserService.enable(id);
        return successResponse(aysUser);
    }
    @RequestMapping(value = "/{id}/disable", method = RequestMethod.POST)
    @ResponseBody
    public Map<String,Object> disable(@PathVariable int id){
        Map<String, Object> aysUser = sysUserService.getUserById(id);
        sysUserService.disable(id);
        return successResponse(aysUser);
    }
    
	
	@RequestMapping(value = "/modifyPwd", method = RequestMethod.POST)
	@ResponseBody
	public Map<String,Object> modifyPwd(String oldPwd,String newPwd){
		Integer userId = WebAppContext.getLoginUserId();
		SysUser user = sysUserService.queryUserInfo(userId);
		if(user.getPassword().equals(UserPwdGenerator.genPwd(oldPwd, user.getSalt()))){
			sysUserService.resetPwd(userId, newPwd);
		}else{
			throw new ThrowAbleException(ResponseStatusEnum.SYS_EXCEPTION);
		}
		return successResponse(user);
	}


    @RequestMapping(value = "/notExists")
    public void exists(HttpServletRequest request, HttpServletResponse response) throws IOException {
        PrintWriter writer = null;
        String userName = request.getParameter("userName");
        String id = request.getParameter("id");
        try{
            writer = response.getWriter();
            boolean isExist = sysUserService.isExist(id == null ? null : Integer.valueOf(id), userName);
            if (isExist) {
                writer.print("false");
            } else {
                writer.print("true");
            }
            writer.flush();
        } finally {
            writer.close();
        }
    }*/

}
